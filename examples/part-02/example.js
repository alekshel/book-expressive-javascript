/* === 1. Построение треугольника в цикле === */

// От автора книги
// for (let line = "#"; line.length < 8; line += "#")
//   console.log(line);

// Мой вариант 1

// let string = '';
// while (string.length < 7) {
//   string += '#';
//   console.log(string.length)
// }

// Мой вариант 2

// let string = '';
// for (let string = '#'; string.length <= 7; string += '#') {
//   console.log(string)
// }

/* === 2. FizzBuzz === */

// От автора книги
// for (let n = 1; n <= 100; n++) {
//   let output = "";
//   if (n % 3 == 0) output += "Fizz";
//   if (n % 5 == 0) output += "Buzz";
//   console.log(output || n);
// }

// Мой вариант
// for (let n = 1; n <= 100; n++) {

//   if (n % 3 == 0 && n % 5 == 0) {
//     console.log('FizzBuzz');
//   } else if (n % 3 == 0) {
//     console.log('Fizz');
//   } else if (n % 5 == 0) {
//     console.log('Buzz');
//   } else {
//     console.log(n);
//   }

// }

/* === 3. Шахматная доска === */
// Решил но не правильно, взял с сайта

// const CHESSBOARD_SIZE = 21;
// let chessboard = "";

// for (let y = 0; y < CHESSBOARD_SIZE; y++) {
//   for (let x = 0; x < CHESSBOARD_SIZE; x++) {

//     chessboard += (x + y) % 2 == 0
//       ? " "
//       : "#";

//   }
//   chessboard += "\n";
// }

// console.log(chessboard);


/**
 * Итог ошибок:
 * 
 * 1. Начинаю решение любой мелкой задачи сразу с объявления переменной,
 * в чём не всегда есть смысл, ведь зачем захламлять память, когда задача
 * состоит лишь в выводе информации.
 * 
 * 2. В задаче FizzBuzz изначально даже не подумал о излишнем кол-ве
 * console.log, ведь в цикле на каждой итерации он необходим лишь один,
 * так же автор предложил интересный вариант конкатенации строк при прохождении
 * условий о чём я не задумался и написал лишний кусок кода.
 * 
 * 3. В задаче с шахматной доской не додумался к рассматрению её по двум осям
 * на пересечении которых определять чётность значения. Выполнял написанной функцией
 * makeStr в цикле. В цекле определял чётность строки, а в makeStr передавал чётность
 * и подставлял пару значений ' #' или '# ', что работало но пока задаёшь чётный размер доски.
 */